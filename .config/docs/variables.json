{
  "SPACE": "",
  "alt_badge_style": "flat-square",
  "author": {
    "email": "brian@megabyte.space",
    "name": "Brian Zalewski"
  },
  "autodoc_actions_description": "",
  "autodoc_tags_description": "",
  "autodoc_todo_description": "",
  "autodoc_variables_description": "",
  "badge_style": "for-the-badge",
  "blueprint_variables": [
    ["Variable", "Description"],
    ["`badge_style`", "Badge style to use from shields.io when generating the documentation"],
    [
      "`description_template`",
      "This is used to populate the description in the `package.json` file which in turn gets used in the README and also may be used to describe the project on other websites. When you add the text `IMAGE_SIZE_PLACEHOLDER` to this variable, it will be replaced with container size information."
    ],
    [
      "`docker_command`",
      "The command that you would normally run when using the Docker image as a one-liner. For Ansible Lint this command would just be `.` because the [Ansible Lint Docker project](https://gitlab.com/megabyte-labs/dockerfile/ci-pipeline/ansible-lint) has an entrypoint of `ENTRYPOINT ['ansible-lint'] in its Dockerfile. So, combining the two means that the command that will run is `ansible-lint .`. However, if the Ansible Lint project did not specify an entrypoint then this field would have to be `ansible-lint .` since that is the command that you would normally run when using this tool."
    ],
    [
      "`docker_command_alias`",
      "Used for generating the documentation for running the Docker container via a bash alias. This variable is the function name. For YAML Lint, this would be `yamllint`. If the user decided to add the bash alias listed in the README in the [YAML Lint repository](https://gitlab.com/megabyte-labs/dockerfile/ci-pipeline/yamllint), they would access the alias by running `yamllint`. To get a better idea, you should refer to any of our Dockerfile project's README files."
    ],
    [
      "`dockerhub_description`",
      "The short description of the project. This is shown on DockerHub and has a limit of 100 characters."
    ],
    [
      "`dockerslim_command`",
      "The arguments passed to DockerSlim when generating a slim build. **Any \\ included in this string must be added as \\\\\\ due to multiple levels of escape character parsings.**."
    ],
    [
      "`preferred_tag`",
      "In general, this should either be `latest` or `slim`. This is the tag that is used to generate the parts of the documentation that refer to specific Docker image tags."
    ],
    [
      "`pretty_name`",
      "The full (pretty) name of the tool (used for generating documentation). This should be capitalized and/or use the same capitalization that the product officially uses (if applicable)."
    ],
    [
      "`project_title`",
      "The title of the project - this controls the title of the README.md and sometimes may be the same as the `pretty_name`."
    ],
    [
      "`slug`",
      "The slug is found by looking at the URL of the repository (e.g. for Ansible Lint, the slug would be `ansible-lint` since the last part of [this URL](https://gitlab.com/megabyte-labs/dockerfile/ci-pipeline/ansible-lint) is ansible-lint)."
    ],
    [
      "`slug_full`",
      "This variable is populated by `.start.sh` by combining the `subgroup` and `slug` or simply using the `slug` depending on which subgroup the project belongs to."
    ],
    [
      "`subgroup`",
      "The subgroup is found by looking at the second to last part of the URL of the repository (e.g. for Ansible Lint the subgroup would be `ci-pipeline`)."
    ]
  ],
  "commit_help_url": "https://megabyte.space/docs/contributing/commit-guidelines",
  "company": "Megabyte LLC",
  "copyright": "2020-2021",
  "docker_label_authors": "Brian Zalewski <brian@megabyte.space>",
  "docker_tests": [
    ["Test Type", "Test Description", "Required", "Example"],
    [
      "**Docker.test.yml ContainerStructureTest**",
      "If the project has a `Docker.test.yml` file defined, then a [ContainerStructureTest](https://github.com/GoogleContainerTools/container-structure-test) will be run on both the regular and slim build (if there is one). If there are not multiple build targets defined in the `Dockerfile`, then you should use this type of test (by naming the test `Docker.test.yml`). Ideally, you should leverage some sample project files which should be stored in a folder in the `test/` directory.",
      "Required when the Dockerfile has 1 build target",
      "[Example `Docker.test.yml`](https://gitlab.com/megabyte-labs/docker/software/devcontainer/-/blob/master/Docker.test.yml)"
    ],
    [
      "**Multiple Docker.target.test.yml ContainerStructureTests**",
      "If the project has multiple build targets defined in the `Dockerfile`, then multiple ContainerStructureTests are required. Each one should be named `Docker.target.test.yml` where target is replaced with the build target name defined in the `Dockerfile`. This will also test both the regular and slim builds. Similar to the previous test type, it is preferrable to make use of test files stored in a directory in the `test/` directory.",
      "Required when the Dockerfile has multiple build targets",
      "[Example Repository](https://gitlab.com/megabyte-labs/docker/codeclimate/eslint)"
    ],
    [
      "**`test-output` Tests**",
      "For each folder in the `test-output` directory, both the regular and slim build will be run in the directory. The container is run by running `docker run -it image:tag .`. If the console output of the regular build does not match the output of the slim build, then this test will fail. ContainerStructureTests are preferrable but this test type is provided for cases where ContainerStructureTests might not suite your needs.",
      "*Optional*",
      "*Coming soon.. maybe..*"
    ],
    [
      "**CodeClimate CLI Test**",
      "This test is unique to [CodeClimate Docker projects](https://gitlab.com/megabyte-labs/docker/codeclimate). For each folder in the `test/` directory that begins with `codeclimate`, the [CodeClimate CLI](https://docs.codeclimate.com/docs/command-line-interface) will run with options specified in the `lint:codeclimate` task. Before running the CodeClimate CLI, our `slim` custom versions of the CodeClimate engines will be pulled from DockerHub and then tagged as `codeclimate/engine:latest`.",
      "Required for CodeClimate engine projects",
      "[Example `codeclimate` folder](https://gitlab.com/megabyte-labs/docker/codeclimate/eslint/-/tree/master/test/codeclimate)"
    ],
    [
      "**GitLab Runner Test**",
      "This test will ensure that the container can be run on GitLab CI by using a local instance of a [GitLab Runner](https://docs.gitlab.com/runner/). The GitLab Runner test simulates GitLab CI pipeline steps by running each stage defined in `.gitlab-ci.yml` that starts with `integration:`.",
      "Required for any project that might be run on GitLab CI",
      "[Example `.gitlab-ci.yml`](https://gitlab.com/megabyte-labs/docker/codeclimate/eslint/-/blob/master/.gitlab-ci.yml)"
    ]
  ],
  "docs": {
    "header_description_post": "<i></i>",
    "header_description_pre": "<i></i>",
    "header_title_post": "<i></i>",
    "header_title_pre": "<i></i>",
    "link": "https://megabyte.space/docs/common/dockerfile"
  },
  "email": {
    "help": "help@megabyte.space"
  },
  "emoji_beginnings": ["🚀 ", "🔥👉 ", "👉 ", "😉 ", "🆓 ", "🐴 ", "👀 ", "🎉 ", "", "", "", "", "", "", "", ""],
  "emoji_endings": [" 🚀", " 🔥🔥🔥", " 👏", " 😉", " 🐙", " 🐴", " 👀", " 🎟", " 🎉🎉", "", "", "", "", "", "", ""],
  "github_prefix": "docker-",
  "gitlab_pipelines": [
    {
      "active": true,
      "cron": "0 5 1 * *",
      "description": "Monthly Repository Update",
      "ref": "synchronize",
      "variable": {
        "REPOSITORY_UPDATE": true
      }
    }
  ],
  "gomodProxy": true,
  "group": "dockerfile",
  "groups": {
    "angular": ["app", "website"],
    "ansible": ["playbook", "role"],
    "docker": ["ansible-molecule", "app", "ci-pipeline", "codeclimate", "software"],
    "go": ["cli", "library"],
    "npm": ["app", "cli", "config", "library", "plugin"],
    "packer": ["desktop", "server"],
    "python": ["cli", "library"]
  },
  "homebrew": {
    "folder": "Formula",
    "name": "homebrew-tap",
    "owner": "installdoc"
  },
  "idPost": "megabyte.space",
  "json_top_keys": "",
  "license": "MIT",
  "link": {
    "chat": "https://app.slack.com/client/T01ABCG4NK1/C01NN74H0LW/details/",
    "docs": "https://megabyte.space/docs",
    "home": "https://megabyte.space",
    "installdoctor": "https://install.doctor",
    "privacy": "https://megabyte.space/privacy",
    "shield": "https://shields.io",
    "terms": "https://megabyte.space/terms"
  },
  "misc": {
    "appnest": "https://github.com/andreasbm/readme",
    "husky": "https://www.npmjs.com/package/husky",
    "tinypng": "https://tinypng.com/"
  },
  "name": "[[ package.json .blueprint.name - See CONTRIBUTING.md ]]",
  "newProjectTemplates": {
    "angular-app": {
      "group": "angular",
      "subgroup": "app",
      "title": "Angular App"
    },
    "angular-website": {
      "group": "angular",
      "subgroup": "website",
      "title": "Angular Website"
    },
    "ansible-role": {
      "group": "ansible",
      "subgroup": "role",
      "title": "Ansible Role"
    },
    "docker-app": {
      "group": "docker",
      "subgroup": "app",
      "title": "Dockerfile (App)"
    },
    "docker-ci-pipeline": {
      "group": "docker",
      "subgroup": "ci-pipeline",
      "title": "CI/CD Pipeline Dockerfile"
    },
    "docker-codeclimate": {
      "group": "docker",
      "subgroup": "codeclimate",
      "title": "CodeClimate Engine / Linter Dockerfile"
    },
    "docker-docker-compose": {
      "group": "docker",
      "subgroup": "docker-compose",
      "title": "Docker Compose"
    },
    "go-cli": {
      "group": "go",
      "subgroup": "cli",
      "title": "Go CLI"
    },
    "go-library": {
      "group": "go",
      "subgroup": "library",
      "title": "Go Library"
    },
    "misc": {
      "group": "misc",
      "subgroup": "misc",
      "title": "Miscellaneous project"
    },
    "npm-app": {
      "group": "npm",
      "subgroup": "app",
      "title": "Node.js App"
    },
    "npm-cli": {
      "group": "npm",
      "subgroup": "cli",
      "title": "Node.js CLI"
    },
    "npm-configs": {
      "group": "npm",
      "subgroup": "configs",
      "title": "NPM Config Package"
    },
    "npm-library": {
      "group": "npm",
      "subgroup": "library",
      "title": "Node.js Library"
    },
    "npm-plugin": {
      "group": "npm",
      "subgroup": "plugin",
      "title": "NPM Plugin"
    },
    "npm-web-component": {
      "group": "npm",
      "subgroup": "web-component",
      "title": "Web Component"
    },
    "packer-desktop": {
      "group": "packer",
      "subgroup": "desktop",
      "title": "Packer (Desktop)"
    },
    "packer-server": {
      "group": "packer",
      "subgroup": "server",
      "title": "Packer (Server)"
    },
    "python-cli": {
      "group": "python",
      "subgroup": "cli",
      "title": "Python CLI"
    },
    "python-library": {
      "group": "python",
      "subgroup": "library",
      "title": "Python Library"
    },
    "website": {
      "group": "npm",
      "subgroup": "website",
      "title": "Website"
    }
  },
  "npm_publish_config_access": "public",
  "npm_standard_version_prerelease": "git add --all",
  "npm_type": "module",
  "organization": "Megabyte Labs",
  "overview": "[[ This is a new repository without the details filled in yet. Look for the section about blueprint data in the CONTRIBUTING.md to set up the project. ]]",
  "profile": {
    "dockerHubUser": "professormanhattan",
    "dockerhub": "megabytelabs",
    "galaxy": "professormanhattan",
    "github": "ProfessorManhattan",
    "linkedin": "blzalewski",
    "npmjs": "thisismyfirstday",
    "npmjs_organization": "mblabs",
    "opencollective": "megabytelabs",
    "patreon": "ProfessorManhattan",
    "pypi": "ProfessorManhattan",
    "replit": "ProfessorMegaby",
    "stackblitz": "ProfessorManhattan",
    "twitter": "MegabyteLabs",
    "vagrant": "ProfessorManhattan"
  },
  "profile_link": {
    "dockerhub": "https://hub.docker.com/u",
    "galaxy": "https://galaxy.ansible.com",
    "github": "https://github.com",
    "linkedin": "https://www.linkedin.com/in/",
    "npmjs": "https://www.npmjs.com/~",
    "opencollective": "https://opencollective.com",
    "patreon": "https://www.patreon.com",
    "pypi": "https://pypi.org/user",
    "replit": "https://repl.it/@",
    "stackblitz": "https://stackblitz.com/@",
    "twitter": "MegabyteLabs",
    "vagrant": "https://app.vagrantup.com"
  },
  "redditApplicationId": "O3UxD7HlPpcN88gpEkPIXQ",
  "redditUsername": "tsgangster",
  "repository": {
    "github": "",
    "gitlab": "",
    "gitlabBaseUrl": "https://gitlab.com/megabyte-labs",
    "group": {
      "ansible_roles": "https://gitlab.com/megabyte-labs/ansible-roles",
      "ansible_roles_path": "megabyte-labs/ansible-roles",
      "apps": "https://gitlab.com/megabyte-labs/apps",
      "apps_path": "megabyte-labs/apps",
      "ci": "https://gitlab.com/megabyte-labs/ci",
      "ci_path": "megabyte-labs/ci",
      "cloud": "https://gitlab.com/megabyte-labs/cloud",
      "cloud_path": "megabyte-labs/cloud",
      "common": "https://gitlab.com/megabyte-labs/common",
      "common_path": "megabyte-labs/common",
      "cryptocurrency": "https://gitlab.com/megabyte-labs/cryptocurrency",
      "cryptocurrency_path": "megabyte-labs/cryptocurrency",
      "docker_compose": "https://gitlab.com/megabyte-labs/docker-compose",
      "docker_compose_path": "megabyte-labs/docker-compose",
      "dockerfile": "https://gitlab.com/megabyte-labs/docker",
      "dockerfile_path": "megabyte-labs/docker",
      "documentation": "https://gitlab.com/megabyte-labs/documentation",
      "documentation_path": "megabyte-labs/documentation",
      "go": "https://gitlab.com/megabyte-labs/go",
      "go_path": "megabyte-labs/go",
      "kubernetes": "https://gitlab.com/megabyte-labs/kubernetes",
      "kubernetes_path": "megabyte-labs/kubernetes_path",
      "npm": "https://gitlab.com/megabyte-labs/npm",
      "npm_path": "megabyte-labs/npm",
      "packer": "https://gitlab.com/megabyte-labs/packer",
      "packer_path": "megabyte-labs/packer",
      "python": "https://gitlab.com/megabyte-labs/python",
      "python_cli_path": "megabyte-labs/python/cli",
      "python_path": "megabyte-labs/python",
      "software": "https://gitlab.com/megabyte-labs/software",
      "software_path": "megabyte-labs/software",
      "web_components": "https://gitlab.com/megabyte-labs/web-components",
      "web_components_path": "megabyte-labs/web-components"
    },
    "location": {
      "commits": {
        "github": "/commits/master",
        "gitlab": "/-/commits/master",
        "gitlab_e2e": "/-/commits/e2e"
      },
      "conduct": {
        "github": "/blob/master/docs/CODE_OF_CONDUCT.md",
        "gitlab": "/-/blob/master/docs/CODE_OF_CONDUCT.md"
      },
      "contributing": {
        "github": "/blob/master/docs/CONTRIBUTING.md",
        "gitlab": "/-/blob/master/docs/CONTRIBUTING.md"
      },
      "demo": {
        "github": "/raw/master/docs/demo.gif",
        "gitlab": "/-/raw/master/docs/demo.gif"
      },
      "issues": {
        "github": "/issues",
        "gitlab": "/-/issues"
      },
      "license": {
        "github": "/blob/master/LICENSE",
        "gitlab": "/-/blob/master/LICENSE"
      },
      "logo": {
        "github": "/raw/master/logo.png",
        "gitlab": "/-/raw/master/logo.png"
      },
      "readme": {
        "github": "/blob/master/README.md",
        "gitlab": "/-/blob/master/README.md"
      }
    },
    "namespace": "",
    "project": {
      "assets": "https://gitlab.com/megabyte-labs/assets/-/raw/master",
      "autodoc": "https://github.com/AndresBott/ansible-autodoc",
      "playbooks": "https://github.com/ProfessorManhattan/Gas-Station",
      "wrangler": "https://gitlab.com/megabyte-labs/wrangler"
    }
  },
  "scriptsBuild": "task donothing",
  "scriptsHelp": "task --menu",
  "scriptsPrepare": "npm run start && (test -f Taskfile.yml && task common:husky) || true",
  "scriptsReplaceThis": "\"",
  "scriptsReplaceWith": "\\\"",
  "scriptsStart": "bash start.sh",
  "scriptsTest": "task donothing",
  "sharp_instructions": [],
  "slackNotificationChannel": "#misc",
  "slackNotificationIcon": "https://gitlab.com/megabyte-labs/misc/assets/-/raw/master/logo/megabytelabs-color-icon-350x350.png",
  "slackNotificationUsername": "Megabyte Labs Release Notification Bot",
  "sponsorship": {
    "author": "Brian Zalewski",
    "text": "I create open source projects out of love. Although I have a job, shelter, and as much fast food as I can handle, it would still be pretty cool to be appreciated by the community for something I have spent a lot of time and money on. Please consider sponsoring me! Who knows? Maybe I will be able to quit my job and publish open source full time."
  },
  "subgroup": "[[ Needs to be setup. Set this in the common repository for this type of project ]]",
  "teamsNotificationColor": "#1DA1F2",
  "teamsNotificationIcon": "https://gitlab.com/megabyte-labs/misc/assets/-/raw/master/logo/megabytelabs-color-icon-350x350.png",
  "title": "[[ package.json .blueprint.title - See CONTRIBUTING.md ]]",
  "version": "0.0.1"
}
